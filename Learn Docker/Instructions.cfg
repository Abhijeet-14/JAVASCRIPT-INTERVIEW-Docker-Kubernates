# Running Containers (omly)
- 'docker ps'

# all Containers
- 'docker ps -a'

# Image
- template to create an env of your choice
- Snapshot
- contains everything need to run Apps
- OS, Software, App Code

# Container
- instance of Image

# pull a image
- 'docker pull nginx'

# list of images locally
- 'docker images'

# Running container from local images
- 'docker run nginx:latest'
        -> we see that this cmd will not close itself.
        -> need to manually exit from it.

# run in detact mode
- 'docker run -d nginx:latest'


# Exposing PORT
- containers run in some port '80/tcp'
- we need to map our local PORT to this container PORT
- localhost:8080 -> 80/tcp
- cmd '-p 8080:70'
- 'docker run -d -p 8080:80 nginx:latest'

# Stop container by ID
- 'docker stop CONTAINER_ID'

# Multiple PORT
- 'docker run -d -p 3000:80 -p 8080:80 nginx:latest'

# Restart Container by Name or ID
- 'docker start CONTAINER_NAME/CONTAINER_ID'

# only CONTAINER ID
- 'docker ps -q'

# List only Container ID
- 'docker ps -aq'

# Remove all containers
- 'docker rm $(docker ps -aq)'

# Remove run containers also.
- 'docker rm -f $(docker ps -aq)'

# Name your Container
- '-n CUSTOM_CONTAINER_NAME'
- 'docker run --name website -d -p 8080:80 nginx:latest'

# ps format
- needs to be in quotes ("")
- 'export FORMAT="ID\t{{.ID}}\nNAME\t{{.Names}}\nImage\t{{.Image}}\nPORTS\t{{.Ports}}\nCOMMAND\t{{.Command}}\nCREATED\t{{.CreatedAt}}\nSTATUS\t{{.Status}}\n" '
- 'docker ps --format=$FORMAT'

# Volumes (Host & Container)
- allows sharing of data. files & folders
- bw host & containers
- '-v pwd:/usr/share/nginx/html:ro'
- pwd - is our local directory
- /usr/share/nginx/html - is host directory
- ro - means read only.
- now instead of host directory, we will get whatever we have in our local directory.
- becoz it got copied to host.
- 'docker run -n website -v pwd:/usr/share/nginx/html -d -p 8080:80 nginx:latest'

# Goto Container Envirnement
- 'docker exec -it website bash'

# Dockerfile
- Build own images
- Create a Dockerfile in root
- 'FROM nginx:latest
  ADD . /usr/share/nginx/html'
    
- 'docker build --tag IMAGE_NAME:TAG .  '

- docker run --name CONTAINER_NAME -d -p 3000:80 IMAGE:latest

# Example of Dockerfile
'
 FROM nginx:latest
 WORKDIR /app
 ADD . .
 RUN npm install
 CMD node index.js
'

# Dockerignore - file don't need for Docker
- create .dockerignore file
- add files do not want to push to image
- node_modules
  .git
  Dockerfile
  venv


# Chaching & Layers
- as per line 91
- we first add files then install packages from line 96
- so even if one line in a files change it again start from 95 -> ...

- Solution? use Chaching
- First install & then add files & folders
'
 FROM nginx:latest
 WORKDIR /app
 ADD package*.json ./
 RUN npm install
 ADD . .
 CMD node index.js
'
- solved


# Use Alpine
- instead of 'nginx:latest' - size 141.3 mb
- we will use 'nginx:alpine' - size 23.5 MB 
- just using alpine the package image reduces drastically. 

# Tag & Versions
- allows to control image Versions
- safe
- 'docker build -t myweb:latest myweb:v1 .  '


# Build with a file name
- 'docker build -t image_name:tag -f Dockerfile-local .'

# Run image with -e
- 'docker run -e 8080:8000 image_name:tag'


# To view the logs of a Docker container in real time, use the following command:
- 'docker logs -f <CONTAINER>' - it will follow for future request
- 'docker logs <CONTAINER>' - it will not follow, exit 